- Modelo para usuario con variable boolean esConductor
- Mover método generateRandomID a su ViewModel
- ¿Debería poder un conductor pedir un taxi?
- Una MainScreen distinta para conductores y usuarios

- SplashScreen -> Comprueba si es primera vez ->
                    -> Si no es primera vez: Login
                    -> Si es primera vez: Asigna nueva ID -> Hace escoger entre conductor y usuario ->
                        -> Si escoge conductor: botón para enviar licencia taxista -> Se activa manualmente por parte de staff
                        -> Si escoge usuario: Introducir datos
- MainScreen usuario -> Si no hay petición o ruta en marcha muestra el floatingActionButton para pedir ruta + info de algún tipo + sugerencias destino IA
                    -> Si hay petición muestra el botón de cancelar y la info del destino + ETA del conductor + ETA al destino + precio estimado (avisará si no hay taxistas activos en un radio de X km)
                    -> Si va en ruta se muestra el mapa + ETA al destino
- MainScreen conductor -> Botón para marcarse como ACTIVO o INACTIVO (con popup de confirmación)
                        -> Si le llega petición de servicio le aparecerá destino, origen, distancia a origen, distancia de origen a destino y botones para aceptar/rechazar
                        -> Cuando acepte un viaje le aparecerá la navegación hasta el cliente
                        -> Cuando llegue donde el cliente accionará un botón para indicar que está dentro del vehículo -> Se iniciará la navegación a destino
                        -> Cuando llegue a destino accionará el botón correspondiente y se le marcará como activo de nuevo para poder recibir servicios
                        -> Cuando se marque como inactivo aparecerá un resumen de km realizados ese día
- Screen historial rutas ->
- Screen nueva petición ruta ->


//HECHO -> El mapa de detallesRuta debe mostrar TAMBIEN el destino
//HECHO -> Añadir botón para salir de la app al menú
//HECHO -> Que cuando no se usa AppScaffold se muestre el logo TaxiYa peque arriba
//HECHO -> Que hora estimada de llegada tenga en cuenta el tiempo que tardará el conductor en llegar al cliente
//HECHO -> Recalcular duración y distancia de llegada a cliente hasta que se llegue a cliente
//HECHO -> Recalcular hora estimada de llegada a destino hasta que se llegue a destino
//HECHO -> Botón "eliminar ruta" no carga bien las rutas, sigue viendose la eliminada
//HECHO -> Que se muestre el mapa en detallesRuta desde que el conductor acepta el viaje o incluso antes
//HECHO -> Corregir cuando "En ruta hacia el destino" -> Duración = 00 min
//HECHO -> dibujar rutas en el mapa
//HECHO -> Añadir confirmación al botón de "Eliminar ruta"

//TODO En la pantalla de buscar rutas como conductor, que se recargue cada X segundos
//TODO Comprobar que la cámara de ubicación en el mapa al crear ruta o buscar cliente sea correcta
//TODO Botón de reiniciar ruta cancelada
//TODO El control de distancias se debe hacer en el viewModel, con la actualización de ubicación. No se debe hacer en el composable
//TODO Cambiar icono floatingAction "+" por texto "crear ruta" o "buscar cliente" <- investigar por qué no funciona o volver a dejar solo icono
//TODO Implementar Botón para marcar conductor como activo/inactivo y que al usuario le avise si no hay conductores en un radio de km (Alternativa -> Que mientras esté la app activa el usuario conste como activo en firebase/usuarios)
//TODO Extra -> Al finalizar ruta, dar al conductor la posibilidad de dirigir a su punto original de antes de aceptar ruta
//TODO Extra -> Implementar notificaciones para avisar de ruta cancelada, conductor en posicion de cliente, etc
//TODO Extra -> Al hacer clic en el mapa, que se muestre un mapa grande con la ruta dibujada